import { useState, useEffect } from 'react';
import { useAuth } from '../../context/AuthContext';
import { useNavigate } from 'react-router-dom';
import '../../styles/admin.css';
import { API_BASE_URL } from '../../config';

const AdminPanel = () => {
  const { admin, logout } = useAuth();
  const navigate = useNavigate();

  const [activeTab, setActiveTab] = useState('addProduct');
  const [orders, setOrders] = useState([]);
  const [editingProduct, setEditingProduct] = useState(null);
  const [archivedOrders, setArchivedOrders] = useState([]);
  const [searchName, setSearchName] = useState('');
  const [searchDate, setSearchDate] = useState('');



  // ‚≠ê –ó–∞ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç
  const [product, setProduct] = useState({
    name: '',
    year: '',
    price: '',
    description: '',
    image: ''
  });

  const [products, setProducts] = useState([]);

  const handleChange = (e) => {
    setProduct({ ...product, [e.target.name]: e.target.value });
  };

  const handleAdd = async (e) => {
    e.preventDefault();
    try {
      const res = await fetch(`${API_BASE_URL}/api/products`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(product)
      });

      const data = await res.json();
      if (res.ok) {
        alert('–ü—Ä–æ–¥—É–∫—Ç—ä—Ç –µ –¥–æ–±–∞–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        setProduct({ name: '', year: '', price: '', description: '', image: '' });
      } else {
        alert(data.error || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ');
      }
    } catch (err) {
      console.error(err);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –∑–∞ PATCH –ø—Ä–æ–¥—É–∫—Ç
  const updateProduct = async (id, updatedFields) => {
    try {
      console.log("üì§ PATCH –∫—ä–º API:", `${API_BASE_URL}/api/products/${id}`);
      console.log("üì¶ –¢—è–ª–æ:", updatedFields);

      const res = await fetch(`${API_BASE_URL}/api/products/${id}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(updatedFields),
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(errorData.error || "–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ü–∏—è");
      }

      const data = await res.json();
      fetchProducts(); // –ø—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å–ø–∏—Å—ä–∫–∞
      setEditingProduct(null);
      return data;
    } catch (err) {
      console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ü–∏—è:", err.message);
      alert("–ù–µ—É—Å–ø–µ—à–Ω–∞ —Ä–µ–¥–∞–∫—Ü–∏—è!");
    }
  };


  const fetchProducts = async () => {
    try {
      const res = await fetch(`${API_BASE_URL}/api/products`);
      const data = await res.json();
      setProducts(data);
    } catch (err) {
      console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏—Ç–µ:', err);
    }
  };

  const deleteProduct = async (id) => {
    if (!window.confirm('–°–∏–≥—É—Ä–Ω–∏ –ª–∏ —Å—Ç–µ, —á–µ –∏—Å–∫–∞—Ç–µ –¥–∞ –∏–∑—Ç—Ä–∏–µ—Ç–µ —Ç–æ–≤–∞ –≤–∏–Ω–æ?')) return;
    try {
      const res = await fetch(`${API_BASE_URL}/api/products/${id}`, {
        method: 'DELETE',
      });

      if (res.ok) {
        setProducts(prev => prev.filter(p => p._id !== id));
      }
    } catch (err) {
      console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –≤–∏–Ω–æ—Ç–æ:', err);
    }
  };

  const updateOrder = async (id, updateData) => {
    try {
      const res = await fetch(`${API_BASE_URL}/api/orders/${id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updateData),
      });

      if (res.ok) {
        setOrders(prev =>
          prev.map(order => order._id === id ? { ...order, ...updateData } : order)
        );
      }
    } catch (err) {
      console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞:', err);
    }
  };

  const completeOrder = async (id) => {
    try {
      const res = await fetch(`${API_BASE_URL}/api/orders/${id}/complete`, {
        method: 'PATCH',
      });

      if (res.ok) {
        await fetchOrders(); // <-- –ø—Ä–µ–∑–∞—Ä–µ–¥–∏ —Å–ø–∏—Å—ä—Ü–∏—Ç–µ
      }
    } catch (err) {
      console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–≤—ä—Ä—à–≤–∞–Ω–µ –Ω–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞:', err);
    }
  };

  const uncompleteOrder = async (id) => {
    try {
      const res = await fetch(`${API_BASE_URL}/api/orders/${id}`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ isCompleted: false }),
      });

      if (res.ok) {
        await fetchOrders();
        setActiveTab('orders'); // üëâ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Ä—ä—â–∞–Ω–µ –∫—ä–º –∞–∫—Ç–∏–≤–Ω–∏
      }
    } catch (err) {
      console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ä—ä—â–∞–Ω–µ –Ω–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞:', err);
    }
  };


  const fetchOrders = async () => {
    try {
      const res = await fetch(`${API_BASE_URL}/api/orders`);
      const data = await res.json();
      setOrders(data.filter(order => !order.isCompleted));
      setArchivedOrders(data.filter(order => order.isCompleted));
    } catch (err) {
      console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø–æ—Ä—ä—á–∫–∏—Ç–µ:', err);
    }
  };


  useEffect(() => {
    if (!admin) {
      navigate('/admin-login');
    }
  }, [admin, navigate]);

  useEffect(() => {
    if (activeTab === 'orders' || activeTab === 'archive') {
      fetchOrders();
    }
    if (activeTab === 'productsList') {
      fetchProducts();
    }
  }, [activeTab]);


  if (!admin) {
    return null; // –∏–∑—á–∞–∫–∞–π –ø—Ä–µ–Ω–∞—Å–æ—á–≤–∞–Ω–µ—Ç–æ
  }


  return (
    <div className="admin-dashboard">
      <h2>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–µ–Ω –ü–∞–Ω–µ–ª</h2>
      <div className="admin-nav">
        <button className={`nav-button ${activeTab === 'addProduct' ? 'active-tab' : ''}`} onClick={() => setActiveTab('addProduct')}>‚ûï –î–æ–±–∞–≤–∏ –≤–∏–Ω–æ</button>
        <button className={`nav-button ${activeTab === 'productsList' ? 'active-tab' : ''}`} onClick={() => setActiveTab('productsList')}>üç∑ –í—Å–∏—á–∫–∏ –≤–∏–Ω–∞</button>
        <button className={`nav-button ${activeTab === 'orders' ? 'active-tab' : ''}`} onClick={() => setActiveTab('orders')}>üì¨ –ü–æ–ª—É—á–µ–Ω–∏ –∑–∞—è–≤–∫–∏</button>
        <button className={`nav-button ${activeTab === 'archive' ? 'active-tab' : ''}`} onClick={() => setActiveTab('archive')}>üìÅ –ê—Ä—Ö–∏–≤</button>
        <button className="nav-button" onClick={logout}>üö™ –ò–∑—Ö–æ–¥</button>
      </div>


      <div className="admin-content">
        {activeTab === 'addProduct' && (
          <form onSubmit={handleAdd} className="admin-form">
            <h3>–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤–æ –≤–∏–Ω–æ</h3>
            <input type="text" name="name" placeholder="–ò–º–µ" value={product.name} onChange={handleChange} required />
            <input type="text" name="year" placeholder="–ì–æ–¥–∏–Ω–∞" value={product.year} onChange={handleChange} required />

            <input type="number" name="price" placeholder="–¶–µ–Ω–∞" value={product.price} onChange={handleChange} required />
            <textarea name="description" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ" value={product.description} onChange={handleChange} required />
            <input type="text" name="image" placeholder="URL –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" value={product.image} onChange={handleChange} required />
            <button type="submit">–î–æ–±–∞–≤–∏</button>
          </form>
        )}

        {activeTab === 'productsList' && (
          <div>
            <h3>üç∑ –°–ø–∏—Å—ä–∫ —Å –≤—Å–∏—á–∫–∏ –≤–∏–Ω–∞</h3>
            {products.length === 0 ? (
              <p>–ù—è–º–∞ –¥–æ–±–∞–≤–µ–Ω–∏ –≤–∏–Ω–∞.</p>
            ) : (
              <ul className="products-list">
                {products.map(p => (
                  <li key={p._id} className="product-item card">
                    {editingProduct?._id === p._id ? (
                      <form
                        onSubmit={(e) => {
                          e.preventDefault();
                          const { _id, ...cleanProduct } = editingProduct;
                          updateProduct(_id, cleanProduct);
                        }}
                      >
                        <input
                          type="text"
                          value={editingProduct.name}
                          onChange={(e) =>
                            setEditingProduct({ ...editingProduct, name: e.target.value })
                          }
                          required
                        />
                        <input
                          type="number"
                          value={editingProduct.year}
                          onChange={(e) =>
                            setEditingProduct({ ...editingProduct, year: Number(e.target.value) })
                          }
                          required
                        />
                        <input
                          type="number"
                          value={editingProduct.price}
                          onChange={(e) =>
                            setEditingProduct({ ...editingProduct, price: Number(e.target.value) })
                          }
                          required
                        />
                        <textarea
                          value={editingProduct.description}
                          onChange={(e) =>
                            setEditingProduct({
                              ...editingProduct,
                              description: e.target.value,
                            })
                          }
                          required
                        />
                        <input
                          type="text"
                          value={editingProduct.image}
                          onChange={(e) =>
                            setEditingProduct({ ...editingProduct, image: e.target.value })
                          }
                          required
                        />
                        <button type="submit">üíæ –ó–∞–ø–∞–∑–∏</button>
                        <button type="button" onClick={() => setEditingProduct(null)}>
                          ‚ùå –û—Ç–∫–∞–∑
                        </button>
                      </form>
                    ) : (
                      <>
                        <img src={p.image} alt={p.name} style={{ width: '100px' }} />
                        <div>
                          <h4>{p.name}</h4>
                          <p>{p.price} –ª–≤.</p>
                        </div>
                        <button onClick={() => setEditingProduct(p)}>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–∞–π</button>
                        <button onClick={() => deleteProduct(p._id)}>‚ùå –ò–∑—Ç—Ä–∏–π</button>
                      </>
                    )}
                  </li>
                ))}
              </ul>
            )}
          </div>
        )}


        <ul className="orders-list">
          {orders.map(order => (
            <li key={order._id} className="order-item card">
              <div className="card-header">{order.customerName}</div>
              <div className="card-body">
                <p><strong>–ò–º–µ–π–ª:</strong> {order.customerEmail}</p>
                <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {order.customerPhone}</p>
                <p><strong>–ê–¥—Ä–µ—Å:</strong> {order.customerAddress}</p>
                <p><strong>–î–∞—Ç–∞ –Ω–∞ –ø–æ—Ä—ä—á–∫–∞:</strong> {new Date(order.createdAt).toLocaleString()}</p>

                <ul>
                  <p><strong>–ü–æ—Ä—ä—á–∞–Ω–∏ –≤–∏–Ω–∞</strong></p>
                  {order.items.map((item, idx) => (

                    <li key={idx}>
                      {item.name} ‚Äì {item.quantity} –±—Ä. @ {item.price.toFixed(2)} –ª–≤. / {(item.price * 1.95583).toFixed(2)}‚Ç¨
                    </li>
                  ))}
                </ul>

                <p><strong>–û–±—â–æ:</strong> {order.items.reduce((sum, i) => sum + i.price * i.quantity, 0).toFixed(2)} –ª–≤. / {(order.items.reduce((sum, i) => sum + i.price * i.quantity, 0).toFixed(2) * 1.95583)} ‚Ç¨ </p>

                <div className="badges">
                  <span className={`badge ${order.isShipped ? 'badge-success' : 'badge-danger'}`}>
                    üì¶ {order.isShipped ? '–ò–∑–ø—Ä–∞—Ç–µ–Ω–∞' : '–ù–µ–∏–∑–ø—Ä–∞—Ç–µ–Ω–∞'}
                  </span>
                  <span className={`badge ${order.isPaid ? 'badge-success' : 'badge-danger'}`}>
                    üí≥ {order.isPaid ? '–ü–ª–∞—Ç–µ–Ω–∞' : '–ù–µ–ø–ª–∞—Ç–µ–Ω–∞'}
                  </span>
                </div>

                <label>
                  <input
                    type="checkbox"
                    checked={order.isShipped}
                    onChange={() => updateOrder(order._id, { isShipped: !order.isShipped })}
                  />
                  –û–±–Ω–æ–≤–∏ —Å—Ç–∞—Ç—É—Å: –ò–∑–ø—Ä–∞—Ç–µ–Ω–∞
                </label>
                <label>
                  <input
                    type="checkbox"
                    checked={order.isPaid}
                    onChange={() => updateOrder(order._id, { isPaid: !order.isPaid })}
                  />
                  –û–±–Ω–æ–≤–∏ —Å—Ç–∞—Ç—É—Å: –ü–ª–∞—Ç–µ–Ω–∞
                </label>

                <button
                  onClick={() => completeOrder(order._id)}
                  disabled={!order.isShipped || !order.isPaid}
                >
                  –ó–∞–≤—ä—Ä—à–∏ –ø–æ—Ä—ä—á–∫–∞—Ç–∞
                </button>
              </div>
            </li>
          ))}
        </ul>


        {activeTab === 'archive' && (
          <div>
            <h3>üìÅ –ê—Ä—Ö–∏–≤ –Ω–∞ –ø–æ—Ä—ä—á–∫–∏</h3>

            <div className="archive-filters">
              <input
                type="text"
                placeholder="–¢—ä—Ä—Å–∏ –ø–æ –∏–º–µ"
                value={searchName}
                onChange={e => setSearchName(e.target.value)}
              />
              <input
                type="date"
                value={searchDate}
                onChange={e => setSearchDate(e.target.value)}
              />
            </div>

            {archivedOrders.length === 0 ? (
              <p>–ù—è–º–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–∏ –ø–æ—Ä—ä—á–∫–∏.</p>
            ) : (
              <ul className="orders-list">
                {archivedOrders
                  .filter(order =>
                    (!searchName || order.customerName.toLowerCase().includes(searchName.toLowerCase())) &&
                    (!searchDate || new Date(order.createdAt).toISOString().slice(0, 10) === searchDate)
                  )
                  .map(order => (
                    <li key={order._id} className="order-item card card-body">
                      <p><strong>–ò–º–µ:</strong> {order.customerName}</p>
                      <p><strong>–ò–º–µ–π–ª:</strong> {order.customerEmail}</p>
                      <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {order.customerPhone}</p>
                      <p><strong>–ê–¥—Ä–µ—Å:</strong> {order.customerAddress}</p>
                      <p><strong>–î–∞—Ç–∞:</strong> {new Date(order.createdAt).toLocaleString()}</p>

                      <ul>
                        {order.items.map((item, idx) => (
                          <li key={idx}>
                            {item.name} ‚Äì {item.quantity} –±—Ä. @ {item.price.toFixed(2)} –ª–≤. / {(item.price * 1.95583).toFixed(2)}‚Ç¨
                          </li>
                        ))}
                      </ul>

                      <p><strong>–û–±—â–æ:</strong> {order.items.reduce((sum, i) => sum + i.price * i.quantity, 0).toFixed(2)} –ª–≤.</p>
                      <p>‚úÖ –ò–∑–ø—Ä–∞—Ç–µ–Ω–∞: {order.isShipped ? '–î–∞' : '–ù–µ'} | üí≥ –ü–ª–∞—Ç–µ–Ω–∞: {order.isPaid ? '–î–∞' : '–ù–µ'}</p>
                      <button onClick={() => uncompleteOrder(order._id)}>–í—ä—Ä–Ω–∏ –≤ –∞–∫—Ç–∏–≤–Ω–∏</button>
                    </li>
                  ))}

              </ul>
            )}


          </div>
        )}

      </div>
    </div>
  );
};

export default AdminPanel;
